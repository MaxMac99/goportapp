//
// ContainerState.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** ContainerState stores container&#39;s running state. It&#39;s part of ContainerJSONBase and will be returned by the \&quot;inspect\&quot; command.  */
public struct ContainerState: Codable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case created = "created"
        case running = "running"
        case paused = "paused"
        case restarting = "restarting"
        case removing = "removing"
        case exited = "exited"
        case dead = "dead"
    }
    /** String representation of the container state. Can be one of \"created\", \"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\".  */
    public var status: Status? = nil
    /** Whether this container is running.  Note that a running container can be _paused_. The `Running` and `Paused` booleans are not mutually exclusive:  When pausing a container (on Linux), the freezer cgroup is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both `Running` _and_ `Paused`.  Use the `Status` field instead to determine if a container's state is \"running\".  */
    public var running: Bool? = nil
    /** Whether this container is paused. */
    public var paused: Bool? = nil
    /** Whether this container is restarting. */
    public var restarting: Bool? = nil
    /** Whether this container has been killed because it ran out of memory.  */
    public var oOMKilled: Bool? = nil
    public var dead: Bool? = nil
    /** The process ID of this container */
    public var pid: Int? = nil
    /** The last exit code of this container */
    public var exitCode: Int? = nil
    public var error: String? = nil
    /** The time when this container was last started. */
    public var startedAt: String? = nil
    /** The time when this container last exited. */
    public var finishedAt: String? = nil
    public var health: Health? = nil

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status = "Status"
        case running = "Running"
        case paused = "Paused"
        case restarting = "Restarting"
        case oOMKilled = "OOMKilled"
        case dead = "Dead"
        case pid = "Pid"
        case exitCode = "ExitCode"
        case error = "Error"
        case startedAt = "StartedAt"
        case finishedAt = "FinishedAt"
        case health = "Health"
    }
}


//
// ContainerInspectResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ContainerInspectResponse: Codable, Hashable {

    /** The ID of the container */
    public var id: String? = nil
    /** The time the container was created */
    public var created: String? = nil
    /** The path to the command being run */
    public var path: String? = nil
    /** The arguments to the command being run */
    public var args: [String]? = nil
    public var state: ContainerState? = nil
    /** The container's image ID */
    public var image: String? = nil
    public var resolvConfPath: String? = nil
    public var hostnamePath: String? = nil
    public var hostsPath: String? = nil
    public var logPath: String? = nil
    public var name: String? = nil
    public var restartCount: Int? = nil
    public var driver: String? = nil
    public var platform: String? = nil
    public var mountLabel: String? = nil
    public var processLabel: String? = nil
    public var appArmorProfile: String? = nil
    /** IDs of exec instances that are running in the container. */
    public var execIDs: [String]? = nil
    public var hostConfig: HostConfig? = nil
    public var graphDriver: GraphDriverData? = nil
    /** The size of files that have been created or changed by this container.  */
    public var sizeRw: Int64? = nil
    /** The total size of all the files in this container. */
    public var sizeRootFs: Int64? = nil
    public var mounts: [MountPoint]? = nil
    public var config: ContainerConfig? = nil
    public var networkSettings: NetworkSettings? = nil

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case created = "Created"
        case path = "Path"
        case args = "Args"
        case state = "State"
        case image = "Image"
        case resolvConfPath = "ResolvConfPath"
        case hostnamePath = "HostnamePath"
        case hostsPath = "HostsPath"
        case logPath = "LogPath"
        case name = "Name"
        case restartCount = "RestartCount"
        case driver = "Driver"
        case platform = "Platform"
        case mountLabel = "MountLabel"
        case processLabel = "ProcessLabel"
        case appArmorProfile = "AppArmorProfile"
        case execIDs = "ExecIDs"
        case hostConfig = "HostConfig"
        case graphDriver = "GraphDriver"
        case sizeRw = "SizeRw"
        case sizeRootFs = "SizeRootFs"
        case mounts = "Mounts"
        case config = "Config"
        case networkSettings = "NetworkSettings"
    }
}

#if DEBUG
extension ContainerInspectResponse: FilePreviewable {
    public static var previewFilename: String { "ContainerInspectResponse" }
}
#endif

//
// ContainerConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Configuration for a container that is portable between hosts */
public struct ContainerConfig: Codable, Hashable {

    /** The hostname to use for the container, as a valid RFC 1123 hostname. */
    public var hostname: String? = nil
    /** The domain name to use for the container. */
    public var domainname: String? = nil
    /** The user that commands are run as inside the container. */
    public var user: String? = nil
    /** Whether to attach to `stdin`. */
    public var attachStdin: Bool? = false
    /** Whether to attach to `stdout`. */
    public var attachStdout: Bool? = true
    /** Whether to attach to `stderr`. */
    public var attachStderr: Bool? = true
    /** An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}`  */
    public var exposedPorts: [String: AnyCodable]? = nil
    /** Attach standard streams to a TTY, including `stdin` if it is not closed.  */
    public var tty: Bool? = false
    /** Open `stdin` */
    public var openStdin: Bool? = false
    /** Close `stdin` after one attached client disconnects */
    public var stdinOnce: Bool? = false
    /** A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.  */
    public var env: [String]? = nil
    /** Command to run specified as a string or an array of strings.  */
    public var cmd: [String]? = nil
    public var healthcheck: HealthConfig? = nil
    /** Command is already escaped (Windows only) */
    public var argsEscaped: Bool? = nil
    /** The name of the image to use when creating the container/  */
    public var image: String? = nil
    /** An object mapping mount point paths inside the container to empty objects.  */
    public var volumes: [String: AnyCodable]? = nil
    /** The working directory for commands to run in. */
    public var workingDir: String? = nil
    /** The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).  */
    public var entrypoint: [String]? = nil
    /** Disable networking for the container. */
    public var networkDisabled: Bool? = nil
    /** MAC address of the container. */
    public var macAddress: String? = nil
    /** `ONBUILD` metadata that were defined in the image's `Dockerfile`.  */
    public var onBuild: [String]? = nil
    /** User-defined key/value metadata. */
    public var labels: [String: String]? = nil
    /** Signal to stop a container as a string or unsigned integer.  */
    public var stopSignal: String? = "SIGTERM"
    /** Timeout to stop a container in seconds. */
    public var stopTimeout: Int? = nil
    /** Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.  */
    public var shell: [String]? = nil

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hostname = "Hostname"
        case domainname = "Domainname"
        case user = "User"
        case attachStdin = "AttachStdin"
        case attachStdout = "AttachStdout"
        case attachStderr = "AttachStderr"
        case exposedPorts = "ExposedPorts"
        case tty = "Tty"
        case openStdin = "OpenStdin"
        case stdinOnce = "StdinOnce"
        case env = "Env"
        case cmd = "Cmd"
        case healthcheck = "Healthcheck"
        case argsEscaped = "ArgsEscaped"
        case image = "Image"
        case volumes = "Volumes"
        case workingDir = "WorkingDir"
        case entrypoint = "Entrypoint"
        case networkDisabled = "NetworkDisabled"
        case macAddress = "MacAddress"
        case onBuild = "OnBuild"
        case labels = "Labels"
        case stopSignal = "StopSignal"
        case stopTimeout = "StopTimeout"
        case shell = "Shell"
    }
}


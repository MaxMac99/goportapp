//
// SystemVersionResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Response of Engine API: GET \&quot;/version\&quot;  */
public struct SystemVersionResponse: Codable, Hashable {

    public var platform: SystemVersionResponsePlatform? = nil
    /** Information about system components  */
    public var components: [SystemVersionResponseComponents]? = nil
    /** The version of the daemon */
    public var version: String? = nil
    /** The default (and highest) API version that is supported by the daemon  */
    public var apiVersion: String? = nil
    /** The minimum API version that is supported by the daemon  */
    public var minAPIVersion: String? = nil
    /** The Git commit of the source code that was used to build the daemon  */
    public var gitCommit: String? = nil
    /** The version Go used to compile the daemon, and the version of the Go runtime in use.  */
    public var goVersion: String? = nil
    /** The operating system that the daemon is running on (\"linux\" or \"windows\")  */
    public var os: String? = nil
    /** The architecture that the daemon is running on  */
    public var arch: String? = nil
    /** The kernel version (`uname -r`) that the daemon is running on.  This field is omitted when empty.  */
    public var kernelVersion: String? = nil
    /** Indicates if the daemon is started with experimental features enabled.  This field is omitted when empty / false.  */
    public var experimental: Bool? = nil
    /** The date and time that the daemon was compiled.  */
    public var buildTime: Date? = nil

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case platform = "Platform"
        case components = "Components"
        case version = "Version"
        case apiVersion = "ApiVersion"
        case minAPIVersion = "MinAPIVersion"
        case gitCommit = "GitCommit"
        case goVersion = "GoVersion"
        case os = "Os"
        case arch = "Arch"
        case kernelVersion = "KernelVersion"
        case experimental = "Experimental"
        case buildTime = "BuildTime"
    }
}

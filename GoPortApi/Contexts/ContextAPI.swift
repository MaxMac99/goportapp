//
// ContextAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ContextAPI {
    
    internal enum ContextAPIPath: APIPathProtocol {
        case contextCreate(name: String)
        case contextDelete(name: String)
        case contextInspect(name: String)
        case contextList
        case contextUpdate(name: String)
        
        var path: String {
            switch self {
            case .contextCreate(let name):
                var localPath = "/contexts/{name}"
                localPath = localPath.replacingOccurrences(of: "{name}", with: mapToPathItem(name), options: .literal, range: nil)
                return localPath
            case .contextDelete(let name):
                var localPath = "/contexts/{name}"
                localPath = localPath.replacingOccurrences(of: "{name}", with: mapToPathItem(name), options: .literal, range: nil)
                return localPath
            case .contextInspect(let name):
                var localPath = "/contexts/{name}/json"
                localPath = localPath.replacingOccurrences(of: "{name}", with: mapToPathItem(name), options: .literal, range: nil)
                return localPath
            case .contextList: return "/contexts/json"
            case .contextUpdate(let name):
                var localPath = "/contexts/{name}/update"
                localPath = localPath.replacingOccurrences(of: "{name}", with: mapToPathItem(name), options: .literal, range: nil)
                return localPath
            }
        }
    }
    
    /**
     Create a context
     - POST /contexts/{name}
     - parameter name: (path) Assign the specified name to the context. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;.
     - parameter body: (body) Context to create
     - returns: String
     */
    public static func contextCreate(host: URL, name: String, body: ContextConfig, session: NetworkingSession = NetworkingSession.shared) async throws -> String {
        try await session.load(APIRequest(method: .POST, host: host, path: ContextAPIPath.contextCreate(name: name), body: body))
    }
    
    /**
     Remove a context
     - DELETE /contexts/{name}
     - parameter name: (path) Name of the context
     - parameter force: (query) If the context is in use, force to remove it. (optional, default to false)
     
     */
    public static func contextDelete(host: URL, name: String, force: Bool? = nil, session: NetworkingSession = NetworkingSession.shared) async throws {
        try await session.load(APIRequest(method: .DELETE, host: host, path: ContextAPIPath.contextDelete(name: name), query: [
            "force": force,
        ]))
    }
    
    /**
     Inspect a context
     - GET /contexts/{name}/json
     - Return low-level information about a context.
     - parameter name: (path) Name of the context
     - returns: ContextInspectResponse
     */
    public static func contextInspect(host: URL, name: String, session: NetworkingSession = NetworkingSession.shared) async throws -> ContextInspectResponse {
        try await session.load(APIRequest(method: .GET, host: host, path: ContextAPIPath.contextInspect(name: name)))
    }
    
    /**
     List contexts
     - GET /contexts/json
     - Returns a list of contexts. For details on the format, see the [inspect endpoint](#operation/ContextInspect).  Note that it uses a different, smaller representation of a context than inspecting a single context.
     - returns: [ContextSummary]
     */
    public static func contextList(host: URL, session: NetworkingSession = NetworkingSession.shared) async throws -> [ContextSummary] {
        try await session.load(APIRequest(method: .GET, host: host, path: ContextAPIPath.contextList))
    }
    
    /**
     Update a context
     - POST /contexts/{name}/update
     - Change various configuration options of a context without having to recreate it.
     - parameter name: (path) Name of the context
     - parameter update: (body)
     
     */
    public static func contextUpdate(host: URL, name: String, update: ContextUpdateBody, session: NetworkingSession = NetworkingSession.shared) async throws {
        try await session.load(APIRequest(method: .POST, host: host, path: ContextAPIPath.contextUpdate(name: name), body: update))
    }
}

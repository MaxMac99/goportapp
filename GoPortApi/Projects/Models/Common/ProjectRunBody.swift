//
// ProjectRunBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ProjectRunBody: Codable, Hashable {

    /** Assign a nem to the container. */
    public var name: String? = nil
    public var command: [String]? = nil
    /** Override the entrypoint of the image. */
    public var entrypoint: [String]? = nil
    /** A list of environment variables in the form `[\"VAR=value\", ...]`.  */
    public var environment: [String]? = nil
    /** A list of labels to override or add in the form `[\"LABEL=value\", ...]`.  */
    public var labels: [String: String]? = nil
    /** Run as specified username or uid.  */
    public var user: String? = nil
    /** Start linked services. */
    public var deps: Bool? = true
    /** Remove contaiiner after run. Ignored in detached mode. */
    public var remove: Bool? = false
    /** Publish a container's port(s) to the host. */
    public var publish: [String]? = nil
    /** Run command with the service's ports enabled and mapped to the host. */
    public var servicePorts: Bool? = false
    /** Use the service's network aliases in the network(s) the container connects to. */
    public var useAliases: Bool? = false
    /** Bind mount volumes */
    public var volume: [String]? = nil
    /** Disable pseudo-tty allocation. By default `docker-compose run` allocates a TTY. */
    public var tty: Bool? = false
    /** Working directory inside the container. */
    public var workdir: String? = nil

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case command = "Command"
        case entrypoint = "Entrypoint"
        case environment = "Environment"
        case labels = "Labels"
        case user = "User"
        case deps = "Deps"
        case remove = "Remove"
        case publish = "Publish"
        case servicePorts = "ServicePorts"
        case useAliases = "UseAliases"
        case volume = "Volume"
        case tty = "Tty"
        case workdir = "Workdir"
    }
}

#if DEBUG
extension ProjectRunBody: Previewable {
    public static var preview: ProjectRunBody {
        ProjectRunBody()
    }
}
#endif
